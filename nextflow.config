// vim: set filetype=nextflow

manifest {
    name = "2D-Complete"
    description = 'Proof of concept of a RNA-seq pipeline for 2D Chemistry' 
    author = 'Bio-Rad'
    mainScript = 'main.nf'
    version = '0.1.11-rc'
}

// Global default params, used in configs
params {
    reads = "NOINPUT"
    genomes_base = "s3://dbg-atac-seq-data-dev/ref_data/2dcomplete/0815191026"
    outDir = "./results"
    genome = "hg38"
    skipUmi = false
    minMapqToCount = 1
    spikeType = "NONE"
    help = false
    monochrome_logs = false
    minBp = 15
    reverseStrand = false
    noTrim = false
    fivePrimeQualCutoff = 0
    threePrimeQualCutoff = 0
    genomesIgnore = false
    tracedir = "${params.outDir}/pipeline_info"
    validateInputs = false
    notrace = false
    container = 'bioraddbg/2d-complete-all:latest'
}

// Specify parameters.settings.json
params_description {
    path = "$baseDir/parameters.settings.json"
}



// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Container, should specifiy release tag
process.container = params.container

// Note that trace in aws will break things
if (!params.notrace) {
    timeline {
      enabled = true
      file = "${params.tracedir}/execution_timeline.html"
    }
    report {
      enabled = true
      file = "${params.tracedir}/execution_report.html"
    }
    trace {
      enabled = true
      file = "${params.tracedir}/execution_trace.txt"
    }
    dag {
      enabled = true
      file = "${params.tracedir}/pipeline_dag.svg"
    }
}

profiles {
    awsbatch {
        includeConfig 'conf/awsbatch.config'
    }
    indocker {
        includeConfig 'conf/indocker.conf'
    }
    docker { docker.enabled = true }
    smoketest { 
        docker.enabled = true
        includeConfig 'conf/testprofiles/smoketest.config'
    }
    localtest {
        docker.enabled = true
        includeConfig 'conf/testprofiles/localtest.conf'
    }
    robots { includeConfig 'conf/robots.config' }
}

// Load genomes.config if required
if (!params.genomesIgnore) {
    includeConfig 'conf/genomes.config'
}

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
// From: https://github.com/nf-core/rnaseq/blob/master/nextflow.config
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
